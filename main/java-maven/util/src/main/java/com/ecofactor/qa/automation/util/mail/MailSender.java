/*
 * MailSender.java
 * Copyright (c) 2013, EcoFactor, All Rights Reserved.
 *
 * This software is the confidential and proprietary information of EcoFactor
 * ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with
 * EcoFactor.
 */
package com.ecofactor.qa.automation.util.mail;

import static com.ecofactor.qa.automation.util.mail.MailConfig.*;

import java.io.File;
import java.io.FileInputStream;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Send mail, authenticates the username and password and connect to host. The emailabe-report
 * generated by the testNg is mailed to recipients configured in the MailSettings.prop
 * @author Aximsoft
 */
public class MailSender {

    private static Logger LOGGER = LoggerFactory.getLogger(MailSender.class);

    /**
     * The main method.
     * @param args the arguments
     */
    public static void main(String[] args) {

        MailSender m = new MailSender();
        m.sendUserStatusMail("Test", "QA", "test", "ecofactorqa@aximsoft.com", false);
    }

    /**
     * <b>Send Mail</b>
     * <ol>
     * <li>Configure the host, retrieving the email-report File and including it in the body
     * section.</li>
     * <li>include recipients address, subject, and send</li>
     * </ol>
     */
    public void sendMail() {

        MailConfig mailConfig = new MailConfig();
        if (mailConfig.get(SEND_MAIL) == null || mailConfig.get(SEND_MAIL).equalsIgnoreCase("false")) {

            LOGGER.warn("Email not sent");
            return;
        }

        String htmlContent = "";

        Properties props = new Properties();
        props.put("mail.smtp.host", mailConfig.get(SMTP_HOST));
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", mailConfig.get(SMTP_PORT));
        props.put("mail.smtp.starttls.enable", "true");

        props.setProperty("mail.host", mailConfig.get(SMTP_HOST));
        props.setProperty("mail.user", mailConfig.get(SMTP_USER));
        props.setProperty("mail.password", mailConfig.get(SMTP_PASSWORD));
        props.put("mail.transport.protocol", "smtp");
        Session session = Session.getInstance(props, new MailAuthenticator(mailConfig.get(SMTP_USER), mailConfig.get(SMTP_PASSWORD)));
        htmlContent = "<html><head></head><body><p><span style=\"font-family:trebuchet ms,helvetica,sans-serif;\">Hi,</span></p><p><span style=\"font-family: trebuchet ms,helvetica,sans-serif;\">&nbsp;&nbsp;Following is the automation test report tested in browser - <b>"
                + mailConfig.get(DRIVER) + "</b></span></p>";

        try {
            String testResultContent = "<b style='font-family:Arial;font-size:15px;'>Test Result : </b><br/><table border='1' width='70%' style='font-family:Arial;font-size:13px;'><tr><td><b>Module</b></td> <td><b>Total Test Case</b></td> <td><b>Test cases Passed</b></td> <td><b>Test cases Failed</b></td><td><b>Test cases Skipped</b></td></tr>";
            // testResultContent += readFileList("target\\surefire-reports\\custom\\");
            testResultContent += "</table><br/>";

            String strContent = readAFile("target\\surefire-reports\\emailable-report.html");
            htmlContent += testResultContent;
            htmlContent += strContent.toString();
            htmlContent += "<p><span style=\"color:#696969;\"><span style=\"font-family: trebuchet ms,helvetica,sans-serif;\">Thanks &amp; Regards<br />Aximsoft QA Automation Team</span></span></p></body></html>";

            Message message = new MimeMessage(session);
            InternetAddress addressFrom = new InternetAddress(mailConfig.get(SMTP_USER));
            message.setFrom(addressFrom);

            Date currentDate = new Date();
            Format formatter = new SimpleDateFormat(mailConfig.get(DATE_FORMAT));
            String dateString = formatter.format(currentDate);
            message.setSubject(mailConfig.get(SUBJECT) + dateString);

            session.setDebug(true);

            Address[] addressToRec = null;
            String[] arr = null;
            String recepients = mailConfig.get(RECEPIENTS);
            if (recepients.contains(",")) {
                arr = recepients.split(",");
            } else {
                arr = new String[1];
                arr[0] = recepients;
            }
            addressToRec = new InternetAddress[arr.length];

            for (int i = 0; i < addressToRec.length; i++) {
                addressToRec[i] = new InternetAddress(arr[i].trim());
            }

            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText("View the File");
            messageBodyPart.setContent(htmlContent, "text/html");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            message.setContent(multipart);

            Transport bus = session.getTransport();
            bus.connect();
            bus.sendMessage(message, addressToRec);
            bus.close();

            LOGGER.warn("Email sent");
        } catch (Exception e) {
            LOGGER.error("Error sending Email", e);
        }
    }

    /**
     * Send user status mail.
     * @param htmlContent the html content
     * @param env the env
     */
    public void sendUserStatusMail(String htmlContent, String env, String subject, String recepients, boolean hasAttachments) {

        MailConfig mailConfig = new MailConfig();
        if (mailConfig.get(SEND_MAIL) == null || mailConfig.get(SEND_MAIL).equalsIgnoreCase("false")) {

            LOGGER.warn("Email not sent");
            return;
        }

        System.out.println(htmlContent);
        Properties props = new Properties();
        props.put("mail.smtp.host", mailConfig.get(SMTP_HOST));
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", mailConfig.get(SMTP_PORT));
        props.put("mail.smtp.starttls.enable", "true");

        props.setProperty("mail.host", mailConfig.get(SMTP_HOST));
        props.setProperty("mail.user", mailConfig.get(SMTP_USER));
        props.setProperty("mail.password", mailConfig.get(SMTP_PASSWORD));
        props.put("mail.transport.protocol", "smtp");
        Session session = Session.getInstance(props, new MailAuthenticator(mailConfig.get(SMTP_USER), mailConfig.get(SMTP_PASSWORD)));

        try {

            Message message = new MimeMessage(session);
            InternetAddress addressFrom = new InternetAddress(mailConfig.get(SMTP_USER));
            message.setFrom(addressFrom);

            Date currentDate = new Date();
            Format formatter = new SimpleDateFormat(mailConfig.get(DATE_FORMAT));
            String dateString = formatter.format(currentDate);
            message.setSubject(subject + " " + env + " @ " + dateString);

            session.setDebug(true);

            Address[] addressToRec = null;
            String[] arr = null;
            if (recepients.contains(",")) {
                arr = recepients.split(",");
            } else {
                arr = new String[1];
                arr[0] = recepients;
            }
            addressToRec = new InternetAddress[arr.length];

            for (int i = 0; i < addressToRec.length; i++) {
                addressToRec[i] = new InternetAddress(arr[i].trim());
            }

			if (hasAttachments) {
				Multipart body = new MimeMultipart();
				MimeBodyPart bodyContent = new MimeBodyPart();
				bodyContent.setContent(htmlContent, "text/html");
				body.addBodyPart(bodyContent);
				MimeBodyPart attachment = new MimeBodyPart();

				FileDataSource datasource = new FileDataSource("target/" + env + "_TestData.xlsx");
				attachment.setDataHandler(new DataHandler(datasource));
				attachment.setFileName(env + "_TestData.xlsx");
				body.addBodyPart(attachment);
				message.setContent(body);
			} else {
				BodyPart messageBodyPart = new MimeBodyPart();
				messageBodyPart.setText("View the File");
				messageBodyPart.setContent(htmlContent, "text/html");

				Multipart multipart = new MimeMultipart();
				multipart.addBodyPart(messageBodyPart);
				message.setContent(multipart);
			}

            Transport bus = session.getTransport();
            bus.connect();
            bus.sendMessage(message, addressToRec);
            bus.close();

            LOGGER.warn("Email sent");
        } catch (Exception e) {
            LOGGER.error("Error sending Email", e);
        }
    }

    /**
     * <p>
     * Read the mailable report and customize the report in html
     * </p>
     * .
     * @param pathConcat the path concat
     * @return the string
     */
    private String readAFile(String pathConcat) {

        File dir = new File(".");
        String path = dir.getAbsolutePath();
        path = path.substring(0, path.length() - 1);
        path += pathConcat;
        File htmlFile = new File(path);
        int ch;
        StringBuffer strContent = new StringBuffer("");
        FileInputStream fin = null;
        try {
            fin = new FileInputStream(htmlFile);
            while ((ch = fin.read()) != -1) {
                strContent.append((char) ch);
            }
            fin.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        String content = strContent.toString();

        content = content.replaceFirst("<table", "<!-- <table");
        content = content.replaceFirst("</table>", "</table> -->");

        return content;
    }
}
